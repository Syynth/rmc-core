{"version":3,"sources":["../src/registry.js"],"names":[],"mappings":";;;;;;;;;;AACA,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC1B,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC1B,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;;IAE1B,iBAAiB;AAEV,WAFP,iBAAiB,CAET,IAAqC,EAAE;;;QAArC,QAAQ,GAAV,IAAqC,CAAnC,QAAQ;QAAE,OAAO,GAAnB,IAAqC,CAAzB,OAAO;sBAAnB,IAAqC,CAAhB,MAAM;QAAN,MAAM,+BAAG,KAAK;;0BAF3C,iBAAiB;;AAGnB,QAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;AACtB,QAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;AACtB,QAAI,CAAC,QAAQ,EAAE;AACb,YAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;KAC3E;AACD,QAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;AACxB,QAAI,OAAO,EAAE;AACX,YAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CACjB,OAAO,CAAC,UAAA,GAAG;eAAI,MAAK,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;OAAA,CAAC,CAAC;KACrD;AACD,QAAI,MAAM,EAAE;AACV,aAAO,IAAI,CAAC,QAAQ,CAAC;AACrB,UAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;AAC1B,aAAO,IAAI,CAAC,UAAU,CAAC;AACvB,UAAI,CAAC,UAAU,GAAG,SAAS,CAAC;AAC5B,YAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,YAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,YAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;KAChC;GAEF;;eAvBG,iBAAiB;;WAyBb,kBAAC,IAAI,EAAE,SAAS,EAAE;;;AACxB,UAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAC9C,UAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACvD,cAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;OAC3E;AACD,UAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC7B,UAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC/B,YAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;AAChC,oBAAY,EAAE,IAAI;AAClB,WAAG,EAAE;iBAAM,UAAA,CAAC;mBAAI,OAAK,MAAM,CAAC,CAAC,OAAK,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAO;WAAA;SAAA;OACxD,CAAC,CAAC;AACH,aAAO,IAAI,CAAC;KACb;;;WAES,oBAAC,IAAI,EAAE;AACf,UAAI,CAAC,GAAG,CAAC,UAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACtD,UAAI,CAAC,GAAG,CAAC,UAAO,CAAC,IAAI,CAAC,CAAC;AACvB,aAAO,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,aAAO,IAAI,CAAC;KACb;;;SA5CG,iBAAiB;;;QAgDd,iBAAiB,GAAjB,iBAAiB","file":"registry.js","sourcesContent":["\r\nconst map = Symbol('map');\r\nconst set = Symbol('set');\r\nconst render = Symbol('render');\r\n\r\nclass ComponentRegistry {\r\n\r\n  constructor({ renderFn, preload, freeze = false }) {\r\n    this[map] = new Map();\r\n    this[set] = new Set();\r\n    if (!renderFn) {\r\n      throw new TypeError('Component Registry must be given a render function');\r\n    }\r\n    this[render] = renderFn;\r\n    if (preload) {\r\n      Object.keys(preload)\r\n        .forEach(key => this.register(key, preload[key]));\r\n    }\r\n    if (freeze) {\r\n      delete this.register;\r\n      this.register = undefined;\r\n      delete this.deregister;\r\n      this.deregister = undefined;\r\n      Object.seal(this);\r\n      Object.freeze(this);\r\n      Object.preventExtensions(this);\r\n    }\r\n\r\n  }\r\n\r\n  register(name, component) {\r\n    let componentJSON = JSON.stringify(component);\r\n    if (this[set].has(componentJSON) || this[map].has(name)) {\r\n      throw new Error('You cannot add the same component to a registry twice!');\r\n    }\r\n    this[set].add(componentJSON);\r\n    this[map].set(name, component);\r\n    Object.defineProperty(this, name, {\r\n      configurable: true,\r\n      get: () => _ => this[render](this[map].get(name), this)\r\n    });\r\n    return this;\r\n  }\r\n\r\n  deregister(name) {\r\n    this[set].delete(JSON.stringify(this[map].get(name)));\r\n    this[map].delete(name);\r\n    delete this[name];\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport { ComponentRegistry };\r\n"]}